spring:
  application:
    name: gateway-microservice
    # We can also use Java based routes, like its mentioned in GatewayConfig.Java. Either 1 can be used.
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: product-service
              #uri: http://localhost:8081
              uri: lb://PRODUCT-MICROSERVICE # Take the service name from Eureka
              predicates:
                - Path=/api/v1/product/**
            - id: user-service
              #uri: http://localhost:8082
              uri: lb://USER-MICROSERVICE # Take the service name from Eureka
              predicates:
                - Path=/api/v1/user/**
            - id: order-service
              #uri: http://localhost:8083
              uri: lb://ORDER-MICROSERVICE # Take the service name from Eureka
              predicates:
                - Path=/api/v1/order/**,/api/v1/cart/**
# http://localhost:8080/api/v1/user -> http://localhost:8082/api/v1/user
# http://localhost:8080/api/v1/order -> http://localhost:8083/api/v1/order
# http://localhost:8080/api/v1/product -> http://localhost:8081/api/v1/product
server:
  port: 8080

## Actuator expose all end points
management:
  endpoints: 
    web: 
      exposure: 
        include: "*"
  tracing: 
    sampling: 
      probability: 1.0

eureka: 
  client: 
    serviceUrl: 
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance: 
    hostname: localhost
    prefer-ip-address: true
    instance-id: localhost:${spring.application.name}:${server.port}
